/****************************************************************************
	This file was generated by GoEnum.

	Do not edit this file. If you do, your changes will be overwritten the next
	time 'generate' is invoked.
******************************************************************************/

package main

import (
	"log"
	"strconv"
)

/*****************************

FooEnum

******************************/

type FooEnum struct{ value_se8feksezspf uint8 }

var Foo = struct {
	Bar FooEnum
	Baz FooEnum
	Buz FooEnum

	// Used to iterate in range loops
	foobar [3]FooEnum
}{
	Bar: FooEnum{value_se8feksezspf: 1},
	Baz: FooEnum{value_se8feksezspf: 2},
	Buz: FooEnum{value_se8feksezspf: 3},
}

func init() {
	Foo.foobar = [3]FooEnum{
		Foo.Bar, Foo.Baz, Foo.Buz,
	}
}

// Value returns the numeric value of the variant as a uint8.
func (Fe FooEnum) Value() uint8 {
	return Fe.value_se8feksezspf
}

// IntValue is the same as 'Value()', except that the value is cast to an 'int'.
func (Fe FooEnum) IntValue() int {
	return int(Fe.value_se8feksezspf)
}

// Name returns the name of the variant as a string.
func (Fe FooEnum) Name() string {
	switch Fe.value_se8feksezspf {
	case 1:
		return "Bar"
	case 2:
		return "Baz"
	case 3:
		return "Buz"
	}

	return ""
}

// String returns the given string value of the variant. If none has been set,
// its return value is as though 'Name()' had been called.

func (Fe FooEnum) String() string {
	switch Fe.value_se8feksezspf {
	case 1:
		return "bar"
	case 2:
		return "baz"
	case 3:
		return "Buz"
	}

	return ""
}

// Description returns the description of the variant. If none has been set, its
// return value is as though 'String()' had been called.
func (Fe FooEnum) Description() string {
	switch Fe.value_se8feksezspf {
	case 1:
		return "bar"
	case 2:
		return "This is the description"
	case 3:
		return "Buz"
	}
	return ""
}

// XML marshaling methods to come

/*****************************

OofEnum

******************************/

type OofEnum struct{ value_ly542v7y07aj uint8 }

var Oof = struct {
	Bar OofEnum
	Baz OofEnum
	Buz OofEnum

	// Used to iterate in range loops
	Values [3]OofEnum
}{
	Bar: OofEnum{value_ly542v7y07aj: 1},
	Baz: OofEnum{value_ly542v7y07aj: 123},
	Buz: OofEnum{value_ly542v7y07aj: 3},
}

func init() {
	Oof.Values = [3]OofEnum{
		Oof.Bar, Oof.Baz, Oof.Buz,
	}
}

// Value returns the numeric value of the variant as a uint8.
func (Oe OofEnum) Value() uint8 {
	return Oe.value_ly542v7y07aj
}

// IntValue is the same as 'Value()', except that the value is cast to an 'int'.
func (Oe OofEnum) IntValue() int {
	return int(Oe.value_ly542v7y07aj)
}

// Name returns the name of the variant as a string.
func (Oe OofEnum) Name() string {
	switch Oe.value_ly542v7y07aj {
	case 1:
		return "Bar"
	case 123:
		return "Baz"
	case 3:
		return "Buz"
	}

	return ""
}

// String returns the given string value of the variant. If none has been set,
// its return value is as though 'Name()' had been called.

func (Oe OofEnum) String() string {
	switch Oe.value_ly542v7y07aj {
	case 1:
		return "bar"
	case 123:
		return "Baz"
	case 3:
		return "Buz"
	}

	return ""
}

// Description returns the description of the variant. If none has been set, its
// return value is as though 'String()' had been called.
func (Oe OofEnum) Description() string {
	switch Oe.value_ly542v7y07aj {
	case 1:
		return "bar"
	case 123:
		return "Baz"
	case 3:
		return "Some description"
	}
	return ""
}

// JSON marshaling methods
func (Oe OofEnum) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Itoa(Oe.IntValue())), nil
}

func (Oe *OofEnum) UnmarshalJSON(b []byte) error {
	var n, err = strconv.ParseUint(string(b), 10, 64)
	if err != nil {
		return err
	}
	Oe.value_ly542v7y07aj = uint8(n)
	return nil
}

// XML marshaling methods to come

/*****************************

AnimalEnum

******************************/

type AnimalEnum struct{ value_zr67onhag3ij uint8 }

var Animal = struct {
	Dog   AnimalEnum
	Cat   AnimalEnum
	Horse AnimalEnum

	// Used to iterate in range loops
	Values [3]AnimalEnum
}{
	Dog:   AnimalEnum{value_zr67onhag3ij: 1},
	Cat:   AnimalEnum{value_zr67onhag3ij: 2},
	Horse: AnimalEnum{value_zr67onhag3ij: 3},
}

func init() {
	Animal.Values = [3]AnimalEnum{
		Animal.Dog, Animal.Cat, Animal.Horse,
	}
}

// Value returns the numeric value of the variant as a uint8.
func (Ae AnimalEnum) Value() uint8 {
	return Ae.value_zr67onhag3ij
}

// IntValue is the same as 'Value()', except that the value is cast to an 'int'.
func (Ae AnimalEnum) IntValue() int {
	return int(Ae.value_zr67onhag3ij)
}

// Name returns the name of the variant as a string.
func (Ae AnimalEnum) Name() string {
	switch Ae.value_zr67onhag3ij {
	case 1:
		return "Dog"
	case 2:
		return "Cat"
	case 3:
		return "Horse"
	}

	return ""
}

// String returns the given string value of the variant. If none has been set,
// its return value is as though 'Name()' had been called.

func (Ae AnimalEnum) String() string {
	switch Ae.value_zr67onhag3ij {
	case 1:
		return "doggy"
	case 2:
		return "kitty"
	case 3:
		return "horsie"
	}

	return ""
}

// Description returns the description of the variant. If none has been set, its
// return value is as though 'String()' had been called.
func (Ae AnimalEnum) Description() string {
	switch Ae.value_zr67onhag3ij {
	case 1:
		return "Your best friend, and you know it."
	case 2:
		return "Your best friend, but doesn't always show it."
	case 3:
		return "Everyone loves horses."
	}
	return ""
}

// JSON marshaling methods
func (Ae AnimalEnum) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Quote(Ae.String())), nil
}

func (Ae *AnimalEnum) UnmarshalJSON(b []byte) error {
	var s, err = strconv.Unquote(string(b))
	if err != nil {
		return err
	}

	if len(s) == 0 {
		return nil
	}

	switch s {
	case "doggy":
		Ae.value_zr67onhag3ij = 1
		return nil
	case "kitty":
		Ae.value_zr67onhag3ij = 2
		return nil
	case "horsie":
		Ae.value_zr67onhag3ij = 3
		return nil
	default:
		log.Printf("Unexpected value: %q while unmarshaling AnimalEnum\n", s)
	}

	return nil
}

// XML marshaling methods to come
