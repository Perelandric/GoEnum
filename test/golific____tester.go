/****************************************************************************
	This file was generated by Golific.

	Do not edit this file. If you do, your changes will be overwritten the next
	time 'generate' is invoked.
******************************************************************************/

package main

import (
	"encoding/json"
	"log"
	"strconv"
	"strings"
)

/******************************************************************************
	ENUM SUMMARY

Oof (type OofEnum, uint8)
	Bar 1 "bar" "bar"
	Baz 123 "Baz" "Baz"
	Buz 3 "Buz" "Some description"

Animal (type AnimalEnum, uint8)
	Dog 1 "doggy" "Your best friend, and you know it."
	Cat 0 "kitty" "Your best friend, but doesn't always show it."
	Horse 3 "horsie" "Everyone loves horses."
******************************************************************************/

/*****************************

TestUnion union

******************************/

type TestUnion interface {
	TestUnion_union_10866u2o2hsza()
}

func (self FooEnum) TestUnion_union_10866u2o2hsza()    {}
func (self AnimalEnum) TestUnion_union_10866u2o2hsza() {}
func (self Tester) TestUnion_union_10866u2o2hsza()     {}

/*****************************

AnotherUnion union

******************************/

type AnotherUnion interface {
	AnotherUnion_union_qusfla91gsem()
}

func (self Tester) AnotherUnion_union_qusfla91gsem()  {}
func (self OofEnum) AnotherUnion_union_qusfla91gsem() {}

/*****************************

Tester struct

******************************/
func NewTester() *Tester {
	return &Tester{
		private: private_1uin53v43654b{
			Test2: "foo",
		},
		AnimalEnum: &Animal.Dog,
		Test4:      "bar",
	}
}

// A struct to test the @struct descriptor
//
// And another line or two for good measure
type Tester struct {
	private private_1uin53v43654b
	*AnimalEnum
	// The fourth item
	Test4    string
	Test5    string
	*FooEnum `whatever`
}

type private_1uin53v43654b struct {
	// The first item
	Test1 string `json:"tester1"`
	Test2 string
	Test3 string `json:"tester3,omitempty"`
}

type json_1uin53v43654b struct {
	*private_1uin53v43654b
	*AnimalEnum
	Test4    string
	Test5    string
	*FooEnum `whatever`
}

func (self *Tester) Test2() string {
	return self.private.Test2
}

func (self *Tester) SetTest3(v string) {
	self.private.Test3 = v
}

func (self *Tester) MarshalJSON() ([]byte, error) {
	return json.Marshal(json_1uin53v43654b{
		&self.private,
		self.AnimalEnum,
		self.Test4,
		self.Test5,
		self.FooEnum,
	})
}

func (self *Tester) UnmarshalJSON(j []byte) error {
	if len(j) == 4 && string(j) == "null" {
		return nil
	}

	m := make(map[string]json.RawMessage)

	err := json.Unmarshal(j, &m)
	if err != nil {
		return err
	}

	// For every property found, perform a separate UnmarshalJSON operation. This
	// prevents overwrite of values in 'self' where properties are absent.
	for key, rawMsg := range m {
		switch key { // The anon structs in each case are needed for field tags
		case "tester1":

			var x = struct {
				F string `json:"tester1"`
			}{}
			if err = json.Unmarshal(rawMsg, &x.F); err != nil {
				return err
			}

			self.private.Test1 = x.F
		case "Test2", "test2":

			var x = struct {
				F string
			}{}
			if err = json.Unmarshal(rawMsg, &x.F); err != nil {
				return err
			}

			self.private.Test2 = x.F
		case "tester3":

			var x = struct {
				F string `json:"tester3,omitempty"`
			}{}
			if err = json.Unmarshal(rawMsg, &x.F); err != nil {
				return err
			}

			self.private.Test3 = x.F
		case "Test4", "test4":

			var x = struct {
				F string
			}{}
			if err = json.Unmarshal(rawMsg, &x.F); err != nil {
				return err
			}

			self.Test4 = x.F

		case "Test5", "test5":

			var x = struct {
				F string
			}{}
			if err = json.Unmarshal(rawMsg, &x.F); err != nil {
				return err
			}

			self.Test5 = x.F

		default:
			// Ignoring unknown property
		}
	}
	return nil
}

/*****************************

FooEnum - bit flags

******************************/

type FooEnum struct{ value_uxp143effuxt uint8 }

var Foo = struct {
	Bar FooEnum
	Baz FooEnum
	Buz FooEnum

	// foobar is an array of all variants. Useful in range loops.
	foobar [3]FooEnum
}{
	Bar: FooEnum{value_uxp143effuxt: 1},
	Baz: FooEnum{value_uxp143effuxt: 2},
	Buz: FooEnum{value_uxp143effuxt: 4},
}

func init() {
	Foo.foobar = [3]FooEnum{
		Foo.Bar, Foo.Baz, Foo.Buz,
	}
}

// Value returns the numeric value of the variant as a uint8.
func (self FooEnum) Value() uint8 {
	return self.value_uxp143effuxt
}

// IntValue is the same as 'Value()', except that the value is cast to an 'int'.
func (self FooEnum) IntValue() int {
	return int(self.value_uxp143effuxt)
}

// Name returns the name of the variant as a string.
func (self FooEnum) Name() string {
	switch self.value_uxp143effuxt {
	case 1:
		return "Bar"
	case 2:
		return "Baz"
	case 4:
		return "Buz"
	}

	return ""
}

// Type returns the variant's type name as a string.
func (self FooEnum) Type() string {
	return "FooEnum"
}

// Namespace returns the variant's namespace name as a string.
func (self FooEnum) Namespace() string {
	return "Foo"
}

// IsDefault returns true if the variant was designated as the default value.
func (self FooEnum) IsDefault() bool {
	return false && self.value_uxp143effuxt == 0
}

// String returns the given string value of the variant. If none has been set,
// its return value is as though 'Name()' had been called.
// If multiple bit values are assigned, the string values will be joined into a
// single string using "," as a separator.
func (self FooEnum) String() string {
	switch self.value_uxp143effuxt {
	case 1:
		return "bar"
	case 2:
		return "baz"
	case 4:
		return "Buz"
	}

	if self.value_uxp143effuxt == 0 {
		return ""
	}

	var vals = make([]string, 0, 3/2)

	for _, item := range Foo.foobar {
		if self.value_uxp143effuxt&item.value_uxp143effuxt == item.value_uxp143effuxt {
			vals = append(vals, item.String())
		}
	}
	return strings.Join(vals, ",")
}

// Description returns the description of the variant. If none has been set, its
// return value is as though 'String()' had been called.
func (self FooEnum) Description() string {
	switch self.value_uxp143effuxt {
	case 1:
		return "bar"
	case 2:
		return "This is the description"
	case 4:
		return "Buz"
	}
	return ""
}

// JSON marshaling methods
func (self FooEnum) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Quote(self.String())), nil
}

func (self *FooEnum) UnmarshalJSON(b []byte) error {
	var s, err = strconv.Unquote(string(b))
	if err != nil {
		return err
	}

	if len(s) == 0 {
		return nil
	}

	switch s {
	case "bar":
		self.value_uxp143effuxt = 1
		return nil
	case "baz":
		self.value_uxp143effuxt = 2
		return nil
	case "Buz":
		self.value_uxp143effuxt = 4
		return nil
	}

	var val = 0

	for _, part := range strings.Split(string(b), ",") {
		switch part {
		case "bar":
			val |= 1
		case "baz":
			val |= 2
		case "Buz":
			val |= 4
		default:
			log.Printf("Unexpected value: %q while unmarshaling FooEnum\n", part)
		}
	}

	self.value_uxp143effuxt = uint8(val)
	return nil
}

// Bitflag enum methods

// Add returns a copy of the variant with the value of 'v' added to it.
func (self FooEnum) Add(v FooEnum) FooEnum {
	self.value_uxp143effuxt |= v.value_uxp143effuxt
	return self
}

// AddAll returns a copy of the variant with all the values of 'v' added to it.
func (self FooEnum) AddAll(v ...FooEnum) FooEnum {
	for _, item := range v {
		self.value_uxp143effuxt |= item.value_uxp143effuxt
	}
	return self
}

// Remove returns a copy of the variant with the value of 'v' removed from it.
func (self FooEnum) Remove(v FooEnum) FooEnum {
	self.value_uxp143effuxt &^= v.value_uxp143effuxt
	return self
}

// RemoveAll returns a copy of the variant with all the values of 'v' removed
// from it.
func (self FooEnum) RemoveAll(v ...FooEnum) FooEnum {
	for _, item := range v {
		self.value_uxp143effuxt &^= item.value_uxp143effuxt
	}
	return self
}

// Has returns 'true' if the receiver contains the value of 'v', otherwise
// 'false'.
func (self FooEnum) Has(v FooEnum) bool {
	return self.value_uxp143effuxt&v.value_uxp143effuxt == v.value_uxp143effuxt
}

// HasAny returns 'true' if the receiver contains any of the values of 'v',
// otherwise 'false'.
func (self FooEnum) HasAny(v ...FooEnum) bool {
	for _, item := range v {
		if self.value_uxp143effuxt&item.value_uxp143effuxt == item.value_uxp143effuxt {
			return true
		}
	}
	return false
}

// HasAll returns 'true' if the receiver contains all the values of 'v',
// otherwise 'false'.
func (self FooEnum) HasAll(v ...FooEnum) bool {
	for _, item := range v {
		if self.value_uxp143effuxt&item.value_uxp143effuxt != item.value_uxp143effuxt {
			return false
		}
	}
	return true
}

/*****************************

OofEnum

******************************/

type OofEnum struct{ value_xkudvemg21aa uint8 }

var Oof = struct {
	Bar OofEnum
	Baz OofEnum
	Buz OofEnum

	// Values is an array of all variants. Useful in range loops.
	Values [3]OofEnum
}{
	Bar: OofEnum{value_xkudvemg21aa: 1},
	Baz: OofEnum{value_xkudvemg21aa: 123},
	Buz: OofEnum{value_xkudvemg21aa: 3},
}

func init() {
	Oof.Values = [3]OofEnum{
		Oof.Bar, Oof.Baz, Oof.Buz,
	}
}

// Value returns the numeric value of the variant as a uint8.
func (self OofEnum) Value() uint8 {
	return self.value_xkudvemg21aa
}

// IntValue is the same as 'Value()', except that the value is cast to an 'int'.
func (self OofEnum) IntValue() int {
	return int(self.value_xkudvemg21aa)
}

// Name returns the name of the variant as a string.
func (self OofEnum) Name() string {
	switch self.value_xkudvemg21aa {
	case 1:
		return "Bar"
	case 123:
		return "Baz"
	case 3:
		return "Buz"
	}

	return ""
}

// Type returns the variant's type name as a string.
func (self OofEnum) Type() string {
	return "OofEnum"
}

// Namespace returns the variant's namespace name as a string.
func (self OofEnum) Namespace() string {
	return "Oof"
}

// IsDefault returns true if the variant was designated as the default value.
func (self OofEnum) IsDefault() bool {
	return false && self.value_xkudvemg21aa == 0
}

// String returns the given string value of the variant. If none has been set,
// its return value is as though 'Name()' had been called.

func (self OofEnum) String() string {
	switch self.value_xkudvemg21aa {
	case 1:
		return "bar"
	case 123:
		return "Baz"
	case 3:
		return "Buz"
	}

	return ""
}

// Description returns the description of the variant. If none has been set, its
// return value is as though 'String()' had been called.
func (self OofEnum) Description() string {
	switch self.value_xkudvemg21aa {
	case 1:
		return "bar"
	case 123:
		return "Baz"
	case 3:
		return "Some description"
	}
	return ""
}

// JSON marshaling methods
func (self OofEnum) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Itoa(int(self.value_xkudvemg21aa))), nil
}

func (self *OofEnum) UnmarshalJSON(b []byte) error {
	var n, err = strconv.ParseUint(string(b), 10, 64)
	if err != nil {
		return err
	}
	self.value_xkudvemg21aa = uint8(n)
	return nil
}

/*****************************

AnimalEnum

******************************/

// An enum to test the @enum descriptor
type AnimalEnum struct{ value_191doxe6txdv7 uint8 }

var Animal = struct {
	// Dog is a dog
	Dog AnimalEnum
	// Cat is a cat
	Cat AnimalEnum
	// Horse is a horse (of course)
	Horse AnimalEnum

	// Values is an array of all variants. Useful in range loops.
	Values [3]AnimalEnum
}{
	Dog:   AnimalEnum{value_191doxe6txdv7: 1},
	Cat:   AnimalEnum{value_191doxe6txdv7: 0},
	Horse: AnimalEnum{value_191doxe6txdv7: 3},
}

func init() {
	Animal.Values = [3]AnimalEnum{
		Animal.Dog, Animal.Cat, Animal.Horse,
	}
}

// Value returns the numeric value of the variant as a uint8.
func (self AnimalEnum) Value() uint8 {
	return self.value_191doxe6txdv7
}

// IntValue is the same as 'Value()', except that the value is cast to an 'int'.
func (self AnimalEnum) IntValue() int {
	return int(self.value_191doxe6txdv7)
}

// Name returns the name of the variant as a string.
func (self AnimalEnum) Name() string {
	switch self.value_191doxe6txdv7 {
	case 1:
		return "Dog"
	case 0:
		return "Cat"
	case 3:
		return "Horse"
	}

	return ""
}

// Type returns the variant's type name as a string.
func (self AnimalEnum) Type() string {
	return "AnimalEnum"
}

// Namespace returns the variant's namespace name as a string.
func (self AnimalEnum) Namespace() string {
	return "Animal"
}

// IsDefault returns true if the variant was designated as the default value.
func (self AnimalEnum) IsDefault() bool {
	return true && self.value_191doxe6txdv7 == 0
}

// String returns the given string value of the variant. If none has been set,
// its return value is as though 'Name()' had been called.

func (self AnimalEnum) String() string {
	switch self.value_191doxe6txdv7 {
	case 1:
		return "doggy"
	case 0:
		return "kitty"
	case 3:
		return "horsie"
	}

	return ""
}

// Description returns the description of the variant. If none has been set, its
// return value is as though 'String()' had been called.
func (self AnimalEnum) Description() string {
	switch self.value_191doxe6txdv7 {
	case 1:
		return "Your best friend, and you know it."
	case 0:
		return "Your best friend, but doesn't always show it."
	case 3:
		return "Everyone loves horses."
	}
	return ""
}

// JSON marshaling methods
func (self AnimalEnum) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Quote(self.String())), nil
}

func (self *AnimalEnum) UnmarshalJSON(b []byte) error {
	var s, err = strconv.Unquote(string(b))
	if err != nil {
		return err
	}

	if len(s) == 0 {
		return nil
	}

	switch s {
	case "doggy":
		self.value_191doxe6txdv7 = 1
		return nil
	case "kitty":
		self.value_191doxe6txdv7 = 0
		return nil
	case "horsie":
		self.value_191doxe6txdv7 = 3
		return nil
	default:
		log.Printf("Unexpected value: %q while unmarshaling AnimalEnum\n", s)
	}

	return nil
}
