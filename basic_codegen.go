package main

import (
	"bytes"
	"go/format"
	"os"
	"text/template"
)

func (self *FileData) generateCode() error {
	if len(self.Enums) == 0 {
		return nil
	}

	self.GatherEnumImports()
	self.GatherStructImports()

	// Execute the template on the data gathered
	var buf bytes.Buffer
	if err := tmpl.Execute(&buf, self); err != nil {
		return err
	}

	// Run the go code formatter to make sure syntax is correct before writing.
	b, err := format.Source(buf.Bytes())
	if err != nil {
		return err
	}

	file, err := os.Create(self.File)
	if err != nil {
		return err
	}
	defer file.Close()

	_, err = file.Write(b)
	return err
}

var tmpl = template.Must(template.New("generate_golific").Parse(
	struct_tmpl +
		enum_tmpl +
		`/****************************************************************************
	This file was generated by Golific.

	Do not edit this file. If you do, your changes will be overwritten the next
	time 'generate' is invoked.
******************************************************************************/

package {{.Package}}

import (
  {{- range $imp, $_ := .Imports}}
  {{printf "%q" $imp -}}
  {{end -}}
)

{{- if .DoStructSummary}}
/******************************************************************************
  STRUCT SUMMARY

******************************************************************************/
{{end -}}

{{- if .DoEnumSummary}}
/******************************************************************************
	ENUM SUMMARY
{{range $enum := .Enums}}
{{- if $enum.DoSummary}}
{{$enum.Name}} (type {{printf "%sEnum" $enum.Name}}, {{$enum.GetIntType}})
{{- range $f := $enum.Fields}}
	{{ printf "%s %d %q %q" $f.Name $f.Value $f.String $f.Description -}}
{{end}}
{{end -}}
{{end -}}
******************************************************************************/
{{end -}}

{{- template "generate_struct" .Structs}}

{{- template "generate_enum" .Enums}}

`))
